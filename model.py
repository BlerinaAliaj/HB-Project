"""Models and database functions for Hiker project."""
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import datetime
#import correlation


# This is the connection to the PostgreSQL database; we're getting this through
# the Flask-SQLAlchemy helper library. On this, we can find the `session`
# object, where we do most of our interactions (like committing, etc.)

db = SQLAlchemy()


##############################################################################
# Model definitions

class User(db.Model):
    """User of of Hiker website.

    User will create its own profile with
    user name,
    first name,
    last name,
    email,
    password,
    zipcode
    """

    __tablename__ = "users"

    user_id = db.Column(db.String(20), primary_key=True)
    first_name = db.Column(db.String(30), nullable=False)
    last_name = db.Column(db.String(30), nullable=False)
    email = db.Column(db.String(64), nullable=False)
    password = db.Column(db.String(64), nullable=False)
    zipcode = db.Column(db.String(15), nullable=True)

    # Create relationship to trip data through users_trips table
    trips = db.relationship("Trip", secondary="users_trips", backref="users")

    def __repr__(self):
        """ Provide helpful representation when printed."""

        return "<User user_id=%s first_name=%s last_name=%s email=%s>" % (self.user_id,
            self.first_name, self.last_name, self.email)


class Trip(db.Model):
    """Trips table for all trips.

    Trips will have an unique trip code in string format for each trip. User can
    create this or one will be autogenerated from name.
    Trip name does not have to be unique, user generated.
    date_created will automatically take timestamp date when the trip was date_created
    date_start can be empty in case the user does not want to specify a date yet
    start_loc and end_loc are start and end locations for the trip
    num_days is the length of trip in days"""

    __tablename__ = "trips"

    trip_code = db.Column(db.String(10), primary_key=True, nullable=False)
    trip_name = db.Column(db.String(60), nullable=False)
    date_created = db.Column(db.DateTime, nullable=False)
    date_start = db.Column(db.String(50), nullable=True)
    start_loc = db.Column(db.String(50), nullable=True)
    end_loc = db.Column(db.String(50), nullable=True)
    num_days = db.Column(db.Integer, nullable=True)

    def __repr__(self):
        """ Provide helpful representation when printed."""

        return "<Trip trip_code=%s trip_name=%s date_created=%s >" % (self.trip_code,
        self.trip_name, self.date_created)


class UserTrip(db.Model):
    """Association table for User and Trip"""

    __tablename__ = "users_trips"

    trip_id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    trip_code = db.Column(db.String(10), db.ForeignKey('trips.trip_code'), nullable=False)
    user_id = db.Column(db.String(20), db.ForeignKey('users.user_id'), nullable=False)

    def __repr__(self):
        """Provide helpful representation when printed."""

        s = "<UserTrip trip_id=%s trip_code=%s user_id=%s>"
        return s % (self.trip_id, self.trip_code, self.user_id)


class Comment(db.Model):
    """Comments table for all comments.

    Each comment has a comment_id, a trip_code that will associate it with the
    trip, a user_id that will log which user sent the comment, and a timestamp
    when the comment was written."""

    __tablename__ = "comments"

    comment_id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    trip_code = db.Column(db.String(10), db.ForeignKey('trips.trip_code'), nullable=False)
    user_id = db.Column(db.String(20), db.ForeignKey('users.user_id'), nullable=False)
    comment = db.Column(db.Text, nullable=True)
    time = db.Column(db.DateTime, nullable=False)

    # Define relationship to trip
    trip = db.relationship("Trip", backref=db.backref("comments"))

    # Define relationship to user
    user = db.relationship("User", backref=db.backref("comments"))

    def __repr__(self):
        """Provide helpful representation when printed."""

        s = "<Comment comment_id=%s trip_code=%s user_id=%s time=%s>"
        return s % (self.comment_id, self.trip_code, self.user_id, self.time)


class List(db.Model):
    """List table for all trip list items.

    Each list item will have a item_id, a trip_code that will associate it with
    the trip, a user_id that will associate it to the user who is going to comp-
    lete the task, a description of the list item/task and a completed boolean
    value to check if it has been completed."""

    __tablename__ = "lists"

    item_id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    trip_code = db.Column(db.String(10), db.ForeignKey('trips.trip_code'), nullable=False)
    user_id = db.Column(db.String(20), db.ForeignKey('users.user_id'), nullable=False)
    description = db.Column(db.String(250), nullable=False)
    completed = db.Column(db.Boolean, nullable=False)

    # Define relationship to trip
    trip = db.relationship("Trip", backref=db.backref("lists"))

    # Define relationship to user
    user = db.relationship("User", backref=db.backref("lists"))

    def __repr__(self):
        """Provide helpful representation when printed."""

        s = "<List item_id=%s trip_code=%s user_id=%s description=%s completed=%s>"
        return s % (self.item_id, self.trip_code, self.user_id, self.description,
                    self.completed)


class Geodata(db.Model):
    """Data from maps api with hiking trail information.

    geo_id: ID of trail
    lon: longitude of trailhead
    lat: latitude of trailhead
    length: length of trail
    park: park name
    desc: description of trail
    status: trail status
    elevation: elevation gain

    """

    __tablename__ = "geodata"

    geo_id = db.Column(db.Integer, primary_key=True)
    lon = db.Column(db.Integer, nullable=False)
    lat = db.Column(db.Integer, nullable=False)
    length = db.Column(db.Integer, nullable=True)
    park = db.Column(db.String(100), nullable=False) # make this True
    desc = db.Column(db.Text, nullable=True)
    status = db.Column(db.String(250), nullable=True)
    elevation = db.Column(db.Integer, nullable=True)

    # Define relationship to trips
    trip = db.relationship("Trip", secondary="geodata_trips", backref="geodata")

    def __repr__(self):
        """Provide helpful representation when printed."""

        s = """<Geodata geo_id=%s lon=%s lat=%s length=%s park=%s desc=%s
                        status=%s elevation=%s>"""
        return s % (self.geo_id, self.lon, self.lat, self.length, self.park,
                    self.desc, self.status, self.elevation)


class GeodataTrip(db.Model):
    """Association table for Geodata and Trip"""

    __tablename__ = "geodata_trips"

    hike_id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    trip_code = db.Column(db.String(10), db.ForeignKey('trips.trip_code'), nullable=False)
    geo_id = db.Column(db.Integer, db.ForeignKey('geodata.geo_id'), nullable=False)

    def __repr__(self):
        """Provide helpful representation when printed."""

        s = "<GeodataTrip hike_id=%s trip_code=%s geo_id=%s>"
        return s % (self.hike_id, self.trip_code, self.geo_id)




##############################################################################
# Helper functions


def connect_to_db(app):
    """Connect the database to our Flask app."""

    # Configure to use our PstgreSQL database
    app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///hiker'
    db.app = app
    db.init_app(app)


if __name__ == "__main__":
    # As a convenience, if we run this module interactively, it will leave
    # you in a state of being able to work with the database directly.

    from server import app
    connect_to_db(app)
    print "Connected to DB."
